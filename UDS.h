/* Include Files */
#include <stdint.h>
#include <stdio.h>

/* Frame */
uint8_t f[8] = {0};

/* SID Definitions */
static const struct UDS_service_identifier
{
    uint8_t DSC;   //  Diagnostic Session Control
    uint8_t ER;    //  ECU Reset
    uint8_t SA;    //  Security Access
    uint8_t CC;    //  Communication Control
    uint8_t TP;    //  Tester Present
    uint8_t ATP;   //  Access Timing Parameter
    uint8_t SDT;   //  Secured Data Transmission
    uint8_t CDTCS; //  Control DTC Setting
    uint8_t ROE;   //  Response On Event
    uint8_t LC;    //  Link Control
    uint8_t RDBI;  //  Read Data By Identifier
    uint8_t RMBA;  //  Read Memory By Address
    uint8_t RSDBI; //  Read Scaling Data By Identifier
    uint8_t RDBPI; //  Read Data By Periodic Identifier
    uint8_t DDDI;  //  Dynamically Define Data Identifier
    uint8_t WDBI;  //  Write Data By Identifier
    uint8_t WMBA;  //  Write Memory By Address
    uint8_t CDTCI; //  Clear DTC Information
    uint8_t RDTCI; //  Read DTC Information
    uint8_t IOCBI; //  Input/Output Control By Identifier
    uint8_t RC;    //  Routine Control
    uint8_t RD;    //  Request Download
    uint8_t RU;    //  Request Upload
    uint8_t TD;    //  Transfer Data
    uint8_t RTE;   //  Request Transfer Exit

    /* Subfunctions IDs */

    const struct sub_function
    {
        uint8_t sub_0;
        uint8_t sub_1;
        uint8_t sub_2;
        uint8_t sub_3;
        uint8_t sub_4;
        uint8_t sub_5;
        uint8_t sub_6;
        uint8_t sub_7;
    } subf;

} S = {0x10U,
       0X11U,
       0X27U,
       0X28U,
       0X3EU,
       0X83U,
       0X84U,
       0X85U,
       0X86U,
       0X87U,
       0X22U,
       0X23U,
       0X24U,
       0X2AU,
       0X2CU,
       0X2EU,
       0X3DU,
       0X14U,
       0X19U,
       0X2FU,
       0X31U,
       0X34U,
       0X35U,
       0X36U,
       0X37U,
       {0X00U,
        0X01U,
        0X02U,
        0X03U,
        0X04U,
        0X05U,
        0X06U,
        0X07U}};

const struct UDS_service_identifier *SID = &S;

static const struct UDS_data_identifier
{
    /* NOTE : DOES NOT INCLUDE ALL VALID DIDs */

    uint16_t U_BAT_ECU;                       // Vehicle mileage
    uint16_t KILOMETRAGE;                     // Vehicle mileage
    uint16_t CPT_TEMPOREL;                    // Vehicle time counter sent by BSI
    uint16_t VITESSE_VEHICULE_ROUES;          // Vehicle speed received from the ESP module via CAN
    uint16_t RCD_LINE_STATE;                  // State of RCD line
    uint16_t HV_BATT_STATE;                   // 48V Battery battery state detection
    uint16_t ETAT_DISCONT_BATT_HT;            // 48V Battery battery relay / contectors state detection
    uint16_t HV_BATT_REAL_VOLT_HD;            // Output voltage of 48V Battery to 48V power grid
    uint16_t HV_BATT_REAL_CURR_HD;            // Output current of 48V Battery to 48V power grid
    uint16_t HV_BATT_REAL_POWER;              // Output Power of 48V Battery to 48V power grid
    uint16_t HV_BATT_TEMP_AVG;                // 48V Battery maximum temperature
    uint16_t HV_BATT_SOC;                     // 48V Battery State Of Charge (SOC)
    uint16_t HV_BATT_SOH_CAPA;                // 48V Battery State Of Health linked to capacity degradation (SOH-C)
    uint16_t HV_BATT_PEAK_DISCH_POWER_HD;     // 48V Battery max peak discharge power
    uint16_t HV_BATT_NOM_DISCH_POWER_HD;      // 48V Battery max nominal discharge power
    uint16_t HV_BATT_PEAK_CH_POWER_HD;        // 48V Battery max peak charge power
    uint16_t HV_BATT_NOM_CH_POWER_HD;         // 48V Battery max nominal charge power
    uint16_t HV_BATT_MIN_VOLT_WARN;           // 48V Battery undervoltage warning
    uint16_t HV_BATT_DISCONT_WARN_OPEN;       // 48V Battery contactors imminent opening alert
    uint16_t HV_BATT_DISCONT_CSE_OPEN;        // 48V battery contactors unexpected opening causes/state
    uint16_t DISCONT_SOUDES;                  // 48V Battery contactors welding status
    uint16_t HV_BATT_STAB_DISCH_POWER_HD;     // 48V Battery stable discharge power (30s)
    uint16_t HV_BATT_STAB_CH_POWER_HD;        // 48V Battery stable charge power (30s)
    uint16_t HV_BATT_COLD_CRANK_ACK;          // Traction battery cold cranking mode acknowledgment state
    uint16_t HV_BATT_HT_CELL_MIM;             // Traction battery lowest cell measured voltage
    uint16_t HV_BATT_HT_CELL_MAX;             // Traction battery highest cell measured voltage
    uint16_t HV_BATT_WATER_TEMP;              // Traction battery input water temperature
    uint16_t HV_BATT_GENERATED_HEAT;          // Thermal power generated by the traction battery
    uint16_t HV_BATT_TEMP_AVG_TRACTION;       // Traction battery average temperature
    uint16_t HV_BATT_TEMP_MIN;                // Traction battery minimum temperature
    uint16_t HV_BATT_SOH_RES;                 // The traction battery capacity to provide and to absorb power
    uint16_t ECU_ELEC_STATE_RCD;              // ECU Appication State
    uint16_t VOLONTE_COND;                    // Driver request
    uint16_t ETAT_GMP_HYB;                    // Hybrid power-train state
    uint16_t ETAT_DISCONT_BATT_HT_TRACTION;   // Traction battery discontactors state
    uint16_t TOTAL_HV_BATT_POSITIVE_ENERGY;   // Energy throughput
    uint16_t TOTAL_HV_BATT_POS_QTY_CURR;      // Capacity throughput
    uint16_t TIME_HV_BATT_OVER_TEMPERATURE;   // Time spent in extreme temperatures,
    uint16_t TIME_HV_BATT_HIGH_TEMP_HIGH_SOC; // Time spent charging during extreme temperatures;

} D = {0XD422U,
       0XD49CU,
       0XD4CAU,
       0XD805U,
       0XD40CU,
       0XD811U,
       0XDA22U,
       0XD815U,
       0XD816U,
       0XDA23U,
       0XD817U,
       0XD810U,
       0XD860U,
       0XDA25U,
       0XDA26U,
       0XDA27U,
       0XDA28U,
       0XDA29U,
       0XDA30U,
       0XD812U,
       0XD814U,
       0XDF00U,
       0XDF01U,
       0XDF02U,
       0XD867U,
       0XD86FU,
       0XD870U,
       0XD879U,
       0XD877U,
       0XD87DU,
       0XD861U,
       0XDF19U,
       0XD407U,
       0XD866U,
       0XD813U,
       0XDA83U,
       0XDA84U,
       0XDA7FU,
       0XDA80U};

const struct UDS_data_identifier *DID = &D;

/* Methods */

// Display any 8 byte frame in the terminal
void display_frame(uint8_t frame[])
{
    printf("\n");
    for (short i = 0; i < 8; i++)
        printf("%#04X ", frame[i]);
}

// Generate a (request) single frame with a DID
void single_frame_did(uint8_t frame[], uint8_t pci_length, uint8_t SID, uint16_t DID, uint64_t data_param)
{
    frame[0] = (0x00U) | pci_length;
    frame[1] = SID;
    frame[2] = (DID >> 8) & 0xFFU;
    frame[3] = DID & 0xFFU;
    frame[4] = (data_param >> (pci_length - 4) * 8) & 0xFFU;
    frame[5] = (data_param >> (pci_length - 5) * 8) & 0xFFU;
    frame[6] = (data_param >> (pci_length - 6) * 8) & 0xFFU;
    frame[7] = (data_param >> (pci_length - 7) * 8) & 0xFFU;
}

// Generate (request) single frame with subfunction
void single_frame_subf(uint8_t frame[], uint8_t pci_length, uint8_t SID, uint8_t subfunc, uint8_t data_param[])
{
    frame[0] = (0x00U) | pci_length;
    frame[1] = SID;
    frame[2] = subfunc;
    frame[3] = data_param[0];
    frame[4] = data_param[1];
    frame[5] = data_param[2];
    frame[6] = data_param[3];
    frame[7] = data_param[4];
}

// Generate flow control frames
void flow_control_frame(uint8_t frame[], uint8_t mode, uint8_t blockSize, uint8_t separation_time)
{
    frame[0] = (0x3U << 4) | mode;
    frame[1] = blockSize;
    frame[2] = separation_time;
    frame[3] = frame[4] = frame[5] = frame[6] = frame[7] = 0xAA;
}

void negative_response_frame(uint8_t frame[], uint8_t NRC)
{
    frame[0] = 0x3U;
    frame[2] = frame[1];
    frame[1] = 0x7FU;
    frame[3] = NRC;
    frame[4] = frame[5] = frame[6] = frame[7] = 0x00;
}